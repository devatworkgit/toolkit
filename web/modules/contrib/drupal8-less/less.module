<?php

/**
 * @file
 * Handles compiling of .less files.
 *
 * The theme system allows for nearly all output of the Drupal system to be
 * customized by user themes.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Asset\CssOptimizer;
use Drupal\Core\Asset\LibraryDiscovery;

/**
 * Implements hook_css_alter().
 *
 * Convert the LESS files to CSS.
 *
 * @param $css
 *   An array of all CSS items (files and inline CSS) being requested on the page.
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 *   The assets attached to the current response.
 *
 * @see Drupal\Core\Asset\LibraryResolverInterface::getCssAssets()
 */
function less_css_alter(&$css, AttachedAssetsInterface $assets) {
  $config = \Drupal::service('config.factory')->get('less.settings');
  foreach ($css AS &$style) {
    if ($style['type'] == 'file' && substr($style['data'], -5) == '.less') {
      $source_file_path = $style['data'];
      if ($compiled_file_info = _less_process_file($source_file_path)) {
        // Save the state after each change.
        if (!$config->get('developer_options.watch')) {
          $style['data'] = $compiled_file_info['destination_file_path'];
        } else {
          unset($style['data']);
        }
        $map[$source_file_path]['destination_file_path'] = $compiled_file_info['destination_file_path'];
        $map[$source_file_path]['computed_style'] = $compiled_file_info['computed_style'];
        $map[$source_file_path]['file_timestamp'] = time();
        \Drupal::state()->set('less_css_cache_files', $map);
      }
    }
  }
}


/**
 * Implements hook_page_attachments_alter().
 */
function less_page_attachments_alter(array &$attachments) {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->get('less.settings');
  
  //If watch mode is on, adding javascript library.
  if ($config->get('developer_options.watch')) {
    //add js library
    $attachments['#attached']['library'][] = 'less/less-watch';
    
    //get cached map
    $map = \Drupal::state()->get('less_css_cache_files');
    
    //output styles like a link for watch mode
    foreach ($map as $key => $compiled_file) {
      //search in map if page has this styles
      foreach ($attachments['#attached']['library'] as $library) {
        $library_parts = explode("/", $library);
        $library_discovered = \Drupal::service('library.discovery')->getLibraryByName($library_parts[0], $library_parts[1]);
        
        if (isset($library_discovered['css'])) {
          //explode library in css files
          foreach ($library_discovered['css'] as $file){
            //if map has existing style
            if(isset($map[$file['data']])) {
              //create a head link for watch mode
              $attachments['#attached']['html_head_link'][] = array(
                array (
                  "type" => 'text/css',
                  "rel" => 'stylesheet',    
                  "href" => "/" . $compiled_file['destination_file_path'],    
                  "media" => "all",
                  "src" => "/" . $key
                )
              );
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function for hook_css_alter().
 *
 * @param string $source_file_path
 *    A relative path to the source file.
 *
 * @param bool $process_only
 *    Whether or not to just compile the file. Used in devel mode.
 *
 * @return array|null
 *    Information about the compiled CSS or NULL.
 */
function _less_process_file($source_file_path, $process_only = FALSE) {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->get('less.settings');

  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
  $fileSystem = \Drupal::service('file_system');

  /** @var \Drupal\less\Plugin\LessEngineManager $engineManager */
  $engineManager = \Drupal::service('plugin.manager.less_engine');

  /** @var \Drupal\less\Plugin\LessEngineInterface $engine */
  $engine = $engineManager->createEngine();

  $engine->setSource($source_file_path);

  // If the file does not exist, process the original LESS file and output
  // the data into the temporary file.
  $computed_style = NULL;
  $create_destination_file = !$engine->destinationExists() && !$config->get('developer_options.devel');
  if ($create_destination_file || $process_only) {
    if ($config->get('developer_options.devel')) {
      $engine->setSourceMaps($config->get('developer_options.source_maps'), DRUPAL_ROOT, base_path());
    }

    // Build the destination folder tree if it doesn't already exist.
    $directory = $fileSystem->dirname($engine->getDestinationUri());
    if (!$process_only && !file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      throw new \RuntimeException(sprintf('Unable to create the storage directory (%s).', $directory));
    }

    $less_import_directories = less_get_import_directories();
    if (!empty($less_import_directories)) {
      $engine->setImportDirectories($less_import_directories);
    }

    $less_variables = less_get_variables();
    if (!empty($less_variables)) {
      $engine->modifyVariables($less_variables);
    }

    try {
      $computed_style = $engine->compile();

      // Fix paths for images as the .css is in different location.
      $css_optimizer = new CssOptimizer();

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $css_optimizer->rewriteFileURIBasePath = base_path() . dirname($source_file_path) . '/';

      // Convert all relative paths with absolute paths.
      $computed_style = preg_replace_callback(
        '/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i',
        array($css_optimizer, 'rewriteFileURI'),
        $computed_style
      );
    } catch (\Exception $exception) {
      watchdog_exception('less', $exception, $exception->getMessage(), [], 'error');
    }

    if (!$process_only && isset($computed_style)) {
      file_unmanaged_save_data($computed_style, $engine->getDestinationUri(), FILE_EXISTS_REPLACE);
    }

    $use_autoprefixer = FALSE;
    if ($use_autoprefixer) {
      try {
        // $autoprefixer = new AutoprefixerCliWrapper($compiled_file_real_path);
        // $autoprefixer->compile();
      } catch (\Exception $exception) {
        watchdog_exception('less', $exception, $exception->getMessage(), [], 'error');
      }
    }
  }

  $return = [
    'source_file_path' => $source_file_path,
  ];
  
  $config_css = \Drupal::config('system.performance')->get('css');
  if ($config->get('developer_options.devel') && !$config_css['preprocess']) {
    if ($process_only) {
      return $return + [
        'computed_style' => $computed_style,
      ];
    }

    // Point to the compiled file instead of the source file.
    return $return + [
      'destination_file_path' => $engine->uriToRelativePath($engine->getDestinationUri()),
    ];
  }

  // Point to the compiled file instead of the source file.
  if ($engine->destinationExists()) {
    return $return + [
      'destination_file_path' => $engine->uriToRelativePath($engine->getDestinationUri()),
    ];
  }

  return NULL;
}

/**
 * Clear the less cache files.
 */
function less_clear_css_cache_files() {
  $delete_stale = function ($uri) {
    // Default stale file threshold is 30 days.
    if (REQUEST_TIME - filemtime($uri) > \Drupal::config('system.performance')->get('stale_file_threshold')) {
      // Delete the file.
      file_unmanaged_delete($uri);

      // Get the map of .less to .css files.
      $map = \Drupal::state()->get('less_css_cache_files') ?: [];
      if ($key = array_search($uri, $map)) {
        unset($map[$key]);
      }
      \Drupal::state()->set('less_css_cache_files', $map);
    }
  };

  // Delete cached less files.
  file_scan_directory('public://less', '/.*/', array('callback' => $delete_stale));

  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
  $fileSystem = \Drupal::service('file_system');

  // Delete remaining empty directories.
  $empty_directories = less_find_empty_directories('public://less');
  foreach ($empty_directories as $empty_directory) {
    if (is_dir($empty_directory)) {
      $fileSystem->rmdir($empty_directory);
    }
  }
}

/**
 * COPIED FROM DRUSH.
 * @see drush_find_empty_directories();
 *
 * Return an array of empty directories.
 *
 * Walk a directory and return an array of subdirectories that are empty. Will
 * return the given directory if it's empty.
 * If a list of items to exclude is provided, subdirectories will be considered
 * empty even if they include any of the items in the list.
 *
 * @param string $dir
 *   Path to the directory to work in.
 * @param array $exclude
 *   Array of files or directory to exclude in the check.
 *
 * @return array
 *   A list of directory paths that are empty. A directory is deemed to be empty
 *   if it only contains excluded files or directories.
 */
function less_find_empty_directories($dir, $exclude = array()) {
  // Skip files.
  if (!is_dir($dir)) {
    return array();
  }
  $to_exclude = array_merge(array('.', '..'), $exclude);
  $empty_dirs = array();
  $dir_is_empty = TRUE;
  foreach (scandir($dir) as $file) {
    // Skip excluded directories.
    if (in_array($file, $to_exclude)) {
      continue;
    }
    // Recurse into sub-directories to find potentially empty ones.
    $subdir = $dir . '/' . $file;
    $empty_dirs += less_find_empty_directories($subdir, $exclude);
    // $empty_dir will not contain $subdir, if it is a file or if the
    // sub-directory is not empty. $subdir is only set if it is empty.
    if (!isset($empty_dirs[$subdir])) {
      $dir_is_empty = FALSE;
    }
  }

  if ($dir_is_empty) {
    $empty_dirs[$dir] = $dir;
  }
  return $empty_dirs;
}

/**
 * Get the variables as defined by hook_less_variables().
 *
 * @see hook_less_variables()
 * @return array
 */
function less_get_variables() {
  $less_variables = drupal_static(__FUNCTION__);

  if (isset($less_variables)) {
    return $less_variables;
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  /** @var array $less_variables */
  $less_variables = $moduleHandler->invokeAll('less_variables');
  $moduleHandler->alter('less_variables', $less_variables);

  return $less_variables;
}

/**
 * Get a list of directories the parser should use for determining import paths.
 *
 * @see hook_import_directories()
 * @return array
 */
function less_get_import_directories() {
  $less_import_directories = drupal_static(__FUNCTION__);

  if (isset($less_import_directories)) {
    return $less_import_directories;
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  /** @var array $less_import_directories */
  $less_import_directories = $moduleHandler->invokeAll('less_import_directories');
  $moduleHandler->alter('less_import_directories', $less_import_directories);
  \Drupal::theme()->alter('less_import_directories', $less_import_directories);

  return $less_import_directories;
}
